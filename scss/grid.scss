@import "mixins";
@import "functions";

@import "grid-settings";

// -----------------------------------------------------------------------------
// Grid Row
// -----------------------------------------------------------------------------
//
// Grid row mixin is used to create a container around the grid units. A
// cleafix is applied to contain and clear floats inside.
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .row {
//        @include grid-row;
//    }
//

@mixin grid-row {
	@include clearfix;

	// Nested grid rows
	& & {
		margin-right: -#{$unit-gutter};
		margin-left: -#{$unit-gutter};
	}

}

.test-row {
	@include grid-row;
}


// -----------------------------------------------------------------------------
// Grid Unit Base
// -----------------------------------------------------------------------------
//
// Grid unit base is used to create the base properties for units.
//
// Arguments:
//
// 1. $gutter - default set to $unit-gutter (_grid-settings.scss)
//
// 2. $float - default set to $unit-float (_grid-settings.scss)
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .unit {
//        @include grid-unit-base(20px, right);
//    }
//

@mixin grid-unit-base($gutter: $unit-gutter, $float: $unit-float) {
	position: relative;
	float: $float;

	@if $gutter != null and $gutter > 0 {
		padding-right: em($gutter);
		padding-left: em($gutter);
	}

}

.test-unit-1 {
	@include grid-unit-base;
}

.test-unit-2 {
	@include grid-unit-base(20px, left);
}

.test-unit-3 {
	@include grid-unit-base($gutter: 30px);
}

.test-unit-4 {
	@include grid-unit-base($float: right);
}

.test-unit-5 {
	@include grid-unit-base($gutter: null, $float: right);
}

.test-unit-6 {
	@include grid-unit-base($gutter: 0px, $float: left);
}


// -----------------------------------------------------------------------------
// Grid Unit Calc
// -----------------------------------------------------------------------------
//
// Grid unit calc is used to calculate width measurements for units.
//
// Arguments:
//
// 1. $count - a unit count of the total ratio
//
// 2. $ratio - the total number of units in the ratio
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .unit-4of7 {
//        @include grid-unit-calc(4, 7);
//    }
//

@mixin grid-unit-calc($count, $ratio) {

	@if $count > $ratio {
		@warn "Mixin $count argument should not be greater than the $ratio argument (#{$count} > #{$ratio}). Please address your mixin values and try again.";
	}

	@else {
		width: ($count / $ratio) * 100%;
	}

}

.test-1of3 {
	@include grid-unit-calc(1, 3);
}

.test-2of3 {
	@include grid-unit-calc($count: 2, $ratio: 3);
}

.test-1of7 {
	@include grid-unit-calc($ratio: 7, $count: 1);
}

.test-3of5 {
	@include grid-unit-calc($count: 3, $ratio: 5);
}

.test-6of4 {
	@include grid-unit-calc($count: 6, $ratio: 4);
}
