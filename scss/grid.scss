// -----------------------------------------------------------------------------
// Imports
// -----------------------------------------------------------------------------

@import "mixins";
@import "functions";

@import "grid-settings";

// -----------------------------------------------------------------------------
// Grid Row
// -----------------------------------------------------------------------------
//
// Grid row mixin is used to create a container around the grid units. A
// cleafix is applied to contain and clear floats inside.
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .row {
//        @include grid-row;
//    }
//

@mixin grid-row {
	@include clearfix;
}


// -----------------------------------------------------------------------------
// Grid Unit Base
// -----------------------------------------------------------------------------
//
// Grid unit base is used to create the base properties for units.
//
// Arguments:
//
// 1. $gutter - default set to $default-unit-gutter (_grid-settings.scss)
//
// 2. $float - default set to $default-unit-float (_grid-settings.scss)
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .unit {
//        @include grid-unit-base(20px, right);
//    }
//

@mixin grid-unit-base($gutter: $default-unit-gutter, $float: $default-unit-float) {
	position: relative;
	float: $float;

	@if $gutter != null and $gutter > 0 {
		padding-right: em($gutter);
		padding-left: em($gutter);
	}

}


// -----------------------------------------------------------------------------
// Grid Unit Calc
// -----------------------------------------------------------------------------
//
// Grid unit calc is used to calculate width measurements for units.
//
// Arguments:
//
// 1. $count - a unit count of the total ratio
//
// 2. $ratio - the total number of units in the ratio
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    .unit-4of7 {
//        @include grid-unit-calc(4, 7);
//    }
//

@mixin grid-unit-calc($count, $ratio, $push: null, $pull: null) {

	@if $count > $ratio {
		@warn "Mixin $count argument should not be greater than the $ratio argument (#{$count} > #{$ratio}). Please address your mixin values and try again.";
	}

	@else {
		width: ($count / $ratio) * 100%;
	}

	@if $push != null {
		right: auto;
		left: (1 / $ratio) * 100% * $push;
	}

	@if $pull != null {
		right: (1 / $ratio) * 100% * $pull;
		left: auto;
	}

}


// -----------------------------------------------------------------------------
// Grid Generator
// -----------------------------------------------------------------------------
//
// The grid generator mixin will be used to loop through the
// below @each statement.
//
// -----------------------------------------------------------------------------
//
// Example usage:
//
//    @include grid-generator("small", 320px, 320px, 6px, 3 6 9);
//

@mixin grid-generator($unit-prefix, $grid-breakpoint, $grid-container-width, $unit-gutter, $unit-ratios) {

	@if $grid-breakpoint == null {

		.#{$grid-container-class-name} {
			width: em($grid-container-width);
		}

		.#{$grid-row-class-name} {

			& & {
				// Nested grid rows
				margin-right: -#{em($unit-gutter)};
				margin-left: -#{em($unit-gutter)};
			}
		}

		%#{$unit-prefix}-base {
			@include grid-unit-base($unit-gutter);
		}

		.#{$unit-prefix} {
			@extend %#{$unit-prefix}-base;
			width: 100%;
		}

		@each $ratio in $unit-ratios {

			@for $unit-count from 1 through ($ratio - 1) {

				.#{$unit-prefix}-#{$unit-count}of#{$ratio} {
					@extend %#{$unit-prefix}-base;
					@include grid-unit-calc($unit-count, $ratio);
				}

			}

			@for $unit-count from 1 through ($ratio - 1) {

				.push-#{$unit-prefix}-#{$unit-count}of#{$ratio} {
					right: auto;
					left: ($unit-count / $ratio) * 100%;
				}

			}

			@for $unit-count from 1 through ($ratio - 1) {

				.pull-#{$unit-prefix}-#{$unit-count}of#{$ratio} {
					right: ($unit-count / $ratio) * 100%;
					left: auto;
				}

			}

		}

	}

	@else {

		@media only screen and (min-width: $grid-breakpoint) {

			.#{$grid-container-class-name} {
				width: auto;
				max-width: em($grid-container-width);
			}

			.#{$grid-row-class-name} {

				& & {
					// Nested grid rows
					margin-right: -#{em($unit-gutter)};
					margin-left: -#{em($unit-gutter)};
				}
			}

			%#{$unit-prefix}-base {
				@include grid-unit-base($unit-gutter);
			}

			.#{$unit-prefix} {
				@extend %#{$unit-prefix}-base;
				width: 100%;
			}

			@each $ratio in $unit-ratios {

				@for $unit-count from 1 through ($ratio - 1) {

					.#{$unit-prefix}-#{$unit-count}of#{$ratio} {
						@extend %#{$unit-prefix}-base;
						@include grid-unit-calc($unit-count, $ratio);
					}

				}

				@for $unit-count from 1 through ($ratio - 1) {

					.push-#{$unit-prefix}-#{$unit-count}of#{$ratio} {
						right: auto;
						left: ($unit-count / $ratio) * 100%;
					}

				}

				@for $unit-count from 1 through ($ratio - 1) {

					.pull-#{$unit-prefix}-#{$unit-count}of#{$ratio} {
						right: ($unit-count / $ratio) * 100%;
						left: auto;
					}

				}

			}

		}

	}

}


// -----------------------------------------------------------------------------
// Grid Markup
// -----------------------------------------------------------------------------
//
// The below will start to construct your grid markup, based on the parameters
// passed into the $grid-generator-map in _grid-settings.scss.
//
// -----------------------------------------------------------------------------

*,
*:before,
*:after {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

.#{$grid-container-class-name} {
	@include clearfix;
	margin: auto;
	width: 100%;
}

.#{$grid-row-class-name} {
	@include grid-row;
}

@each $unit-prefix, $grid-breakpoint, $grid-container-width, $unit-gutter, $unit-ratios in $grid-generator-map {

	@include grid-generator($unit-prefix, $grid-breakpoint, $grid-container-width, $unit-gutter, $unit-ratios);

}

.gu-sass-push-pull-test {
	@include grid-unit-base;
}

.gu-sass-push-pull-test-1 {
	@include grid-unit-calc(1, 4, 3, null);
}

.gu-sass-push-pull-test-2 {
	@include grid-unit-calc(1, 4, 1, null);
}

.gu-sass-push-pull-test-3 {
	@include grid-unit-calc(1, 4, null, 1);
}

.gu-sass-push-pull-test-4 {
	@include grid-unit-calc(1, 4, null, 3);
}
